// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(SilttiUniffiFFI)
    import SilttiUniffiFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_siltti_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_siltti_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void
) {
    do {
        try writeReturn(makeCall())
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void,
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public protocol ActionProtocol: AnyObject {
    func isTransmit() -> Bool

    func makePacket() -> Data?
}

open class Action:
    ActionProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_siltti_fn_clone_action(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_siltti_fn_free_action(pointer, $0) }
    }

    public static func newDerivation(cutPath: String, hasPwd: Bool, signatureMaker: SignByCompanion) throws -> Action {
        return try FfiConverterTypeAction.lift(rustCallWithError(FfiConverterTypeErrorCompanion.lift) {
            uniffi_siltti_fn_constructor_action_new_derivation(
                FfiConverterString.lower(cutPath),
                FfiConverterBool.lower(hasPwd),
                FfiConverterTypeSignByCompanion.lower(signatureMaker), $0
            )
        })
    }

    public static func newKampelaStop(signatureMaker: SignByCompanion) throws -> Action {
        return try FfiConverterTypeAction.lift(rustCallWithError(FfiConverterTypeErrorCompanion.lift) {
            uniffi_siltti_fn_constructor_action_new_kampela_stop(
                FfiConverterTypeSignByCompanion.lower(signatureMaker), $0
            )
        })
    }

    public static func newPayload(payload: Data, dbPath: String, signatureMaker: SignByCompanion) throws -> Action {
        return try FfiConverterTypeAction.lift(rustCallWithError(FfiConverterTypeErrorCompanion.lift) {
            uniffi_siltti_fn_constructor_action_new_payload(
                FfiConverterData.lower(payload),
                FfiConverterString.lower(dbPath),
                FfiConverterTypeSignByCompanion.lower(signatureMaker), $0
            )
        })
    }

    open func isTransmit() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_siltti_fn_method_action_is_transmit(self.uniffiClonePointer(), $0)
        })
    }

    open func makePacket() -> Data? {
        return try! FfiConverterOptionData.lift(try! rustCall {
            uniffi_siltti_fn_method_action_make_packet(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeAction: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Action

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Action {
        return Action(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Action) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Action {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Action, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeAction_lift(_ pointer: UnsafeMutableRawPointer) throws -> Action {
    return try FfiConverterTypeAction.lift(pointer)
}

public func FfiConverterTypeAction_lower(_ value: Action) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAction.lower(value)
}

/**
 * Collected and processed frames interacting with the outside code through
 * `uniffi`
 */
public protocol CollectionProtocol: AnyObject {
    /**
     * Clean existing [`Collection`].
     */
    func clean() throws

    func frames() throws -> Frames?

    /**
     * Process new frame and modify [`Collection`]. Outputs optional final
     * result, indicating to UI that it is time to proceed.
     */
    func processFrame(rawFrame: Data) throws -> Payload
}

/**
 * Collected and processed frames interacting with the outside code through
 * `uniffi`
 */
open class Collection:
    CollectionProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_siltti_fn_clone_collection(self.pointer, $0) }
    }

    /**
     * Make new [`Collection`].
     */
    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_siltti_fn_constructor_collection_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_siltti_fn_free_collection(pointer, $0) }
    }

    /**
     * Clean existing [`Collection`].
     */
    open func clean() throws { try rustCallWithError(FfiConverterTypeErrorQr.lift) {
        uniffi_siltti_fn_method_collection_clean(self.uniffiClonePointer(), $0)
    }
    }

    open func frames() throws -> Frames? {
        return try FfiConverterOptionTypeFrames.lift(rustCallWithError(FfiConverterTypeErrorQr.lift) {
            uniffi_siltti_fn_method_collection_frames(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Process new frame and modify [`Collection`]. Outputs optional final
     * result, indicating to UI that it is time to proceed.
     */
    open func processFrame(rawFrame: Data) throws -> Payload {
        return try FfiConverterTypePayload.lift(rustCallWithError(FfiConverterTypeErrorQr.lift) {
            uniffi_siltti_fn_method_collection_process_frame(self.uniffiClonePointer(),
                                                             FfiConverterData.lower(rawFrame), $0)
        })
    }
}

public struct FfiConverterTypeCollection: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Collection

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Collection {
        return Collection(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Collection) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Collection {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Collection, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeCollection_lift(_ pointer: UnsafeMutableRawPointer) throws -> Collection {
    return try FfiConverterTypeCollection.lift(pointer)
}

public func FfiConverterTypeCollection_lower(_ value: Collection) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCollection.lower(value)
}

public protocol SelectorElementProtocol: AnyObject {}

open class SelectorElement:
    SelectorElementProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_siltti_fn_clone_selectorelement(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_siltti_fn_free_selectorelement(pointer, $0) }
    }
}

public struct FfiConverterTypeSelectorElement: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SelectorElement

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SelectorElement {
        return SelectorElement(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SelectorElement) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SelectorElement {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SelectorElement, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeSelectorElement_lift(_ pointer: UnsafeMutableRawPointer) throws -> SelectorElement {
    return try FfiConverterTypeSelectorElement.lift(pointer)
}

public func FfiConverterTypeSelectorElement_lower(_ value: SelectorElement) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSelectorElement.lower(value)
}

public protocol SignByCompanion: AnyObject {
    func makeSignature(data: Data) -> Data

    func exportPublicKey() -> Data
}

open class SignByCompanionImpl:
    SignByCompanion
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_siltti_fn_clone_signbycompanion(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_siltti_fn_free_signbycompanion(pointer, $0) }
    }

    open func makeSignature(data: Data) -> Data {
        return try! FfiConverterData.lift(try! rustCall {
            uniffi_siltti_fn_method_signbycompanion_make_signature(self.uniffiClonePointer(),
                                                                   FfiConverterData.lower(data), $0)
        })
    }

    open func exportPublicKey() -> Data {
        return try! FfiConverterData.lift(try! rustCall {
            uniffi_siltti_fn_method_signbycompanion_export_public_key(self.uniffiClonePointer(), $0)
        })
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceSignByCompanion {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceSignByCompanion = .init(
        makeSignature: { (
            uniffiHandle: UInt64,
            data: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Data in
                guard let uniffiObj = try? FfiConverterTypeSignByCompanion.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.makeSignature(
                    data: FfiConverterData.lift(data)
                )
            }

            let writeReturn = { uniffiOutReturn.pointee = FfiConverterData.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        exportPublicKey: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Data in
                guard let uniffiObj = try? FfiConverterTypeSignByCompanion.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.exportPublicKey(
                )
            }

            let writeReturn = { uniffiOutReturn.pointee = FfiConverterData.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterTypeSignByCompanion.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface SignByCompanion: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitSignByCompanion() {
    uniffi_siltti_fn_init_callback_vtable_signbycompanion(&UniffiCallbackInterfaceSignByCompanion.vtable)
}

public struct FfiConverterTypeSignByCompanion: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<SignByCompanion>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SignByCompanion

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SignByCompanion {
        return SignByCompanionImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SignByCompanion) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignByCompanion {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SignByCompanion, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeSignByCompanion_lift(_ pointer: UnsafeMutableRawPointer) throws -> SignByCompanion {
    return try FfiConverterTypeSignByCompanion.lift(pointer)
}

public func FfiConverterTypeSignByCompanion_lower(_ value: SignByCompanion) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSignByCompanion.lower(value)
}

public protocol SignatureMakerProtocol: AnyObject {
    func signedData(encodedData: Data) -> Data
}

open class SignatureMaker:
    SignatureMakerProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_siltti_fn_clone_signaturemaker(self.pointer, $0) }
    }

    public convenience init(signatureMaker: SignByCompanion) {
        let pointer =
            try! rustCall {
                uniffi_siltti_fn_constructor_signaturemaker_new(
                    FfiConverterTypeSignByCompanion.lower(signatureMaker), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_siltti_fn_free_signaturemaker(pointer, $0) }
    }

    open func signedData(encodedData: Data) -> Data {
        return try! FfiConverterData.lift(try! rustCall {
            uniffi_siltti_fn_method_signaturemaker_signed_data(self.uniffiClonePointer(),
                                                               FfiConverterData.lower(encodedData), $0)
        })
    }
}

public struct FfiConverterTypeSignatureMaker: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SignatureMaker

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SignatureMaker {
        return SignatureMaker(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SignatureMaker) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignatureMaker {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SignatureMaker, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeSignatureMaker_lift(_ pointer: UnsafeMutableRawPointer) throws -> SignatureMaker {
    return try FfiConverterTypeSignatureMaker.lift(pointer)
}

public func FfiConverterTypeSignatureMaker_lower(_ value: SignatureMaker) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSignatureMaker.lower(value)
}

/**
 * Object to move number of frames through uniffi
 */
public struct Frames {
    public var current: UInt32
    public var total: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(current: UInt32, total: UInt32) {
        self.current = current
        self.total = total
    }
}

extension Frames: Equatable, Hashable {
    public static func == (lhs: Frames, rhs: Frames) -> Bool {
        if lhs.current != rhs.current {
            return false
        }
        if lhs.total != rhs.total {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(current)
        hasher.combine(total)
    }
}

public struct FfiConverterTypeFrames: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Frames {
        return
            try Frames(
                current: FfiConverterUInt32.read(from: &buf),
                total: FfiConverterUInt32.read(from: &buf)
            )
    }

    public static func write(_ value: Frames, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.current, into: &buf)
        FfiConverterUInt32.write(value.total, into: &buf)
    }
}

public func FfiConverterTypeFrames_lift(_ buf: RustBuffer) throws -> Frames {
    return try FfiConverterTypeFrames.lift(buf)
}

public func FfiConverterTypeFrames_lower(_ value: Frames) -> RustBuffer {
    return FfiConverterTypeFrames.lower(value)
}

/**
 * Object to move output through uniffi
 */
public struct Payload {
    public var payload: Data?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(payload: Data?) {
        self.payload = payload
    }
}

extension Payload: Equatable, Hashable {
    public static func == (lhs: Payload, rhs: Payload) -> Bool {
        if lhs.payload != rhs.payload {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(payload)
    }
}

public struct FfiConverterTypePayload: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Payload {
        return
            try Payload(
                payload: FfiConverterOptionData.read(from: &buf)
            )
    }

    public static func write(_ value: Payload, into buf: inout [UInt8]) {
        FfiConverterOptionData.write(value.payload, into: &buf)
    }
}

public func FfiConverterTypePayload_lift(_ buf: RustBuffer) throws -> Payload {
    return try FfiConverterTypePayload.lift(buf)
}

public func FfiConverterTypePayload_lower(_ value: Payload) -> RustBuffer {
    return FfiConverterTypePayload.lower(value)
}

public enum ErrorCompanion {
    case Base58PrefixFormatNotSupported(message: String)

    case Base58PrefixMismatch(message: String)

    case BlockHashFormat(message: String)

    case Client(message: String)

    case DbInternal(message: String)

    case DbTransaction(message: String)

    case DecimalsFormatNotSupported(message: String)

    case DecodeDbAddress(message: String)

    case DecodeDbKey(message: String)

    case DecodeDbMetadataSpecs(message: String)

    case GenesisHashFormat(message: String)

    case GenesisHashLength(message: String)

    case InterfaceKey(message: String)

    case LoadSpecsMetadata(message: String)

    case LostAddress(message: String)

    case LtError(message: String)

    case MetaCut(message: String)

    case MetadataFetchWithoutExistingEntry(message: String)

    case MetadataFormat(message: String)

    case MetadataNotDecodeable(message: String)

    case MetadataVersion(message: String)

    case NoBase58Prefix(message: String)

    case NoDecimals(message: String)

    case NoExistingEntryMetadataUpdate(message: String)

    case NoMetadataV15(message: String)

    case NoMetaPrefix(message: String)

    case NotHex(message: String)

    case NotSent(message: String)

    case NotSubstrate(message: String)

    case NoUnit(message: String)

    case OnlySr25519(message: String)

    case PoisonedLockSelector(message: String)

    case PropertiesFormat(message: String)

    case RawMetadataNotDecodeable(message: String)

    case ReceiverClosed(message: String)

    case ReceiverGuardPoisoned(message: String)

    case RequestSer(message: String)

    case ResponseDe(message: String)

    case TooShort(message: String)

    case TransactionNotParsable(message: String)

    case UnexpectedFetch(message: String)

    case UnitFormatNotSupported(message: String)

    case UnknownPayloadType(message: String)

    case UpdateMetadata(message: String)
}

public struct FfiConverterTypeErrorCompanion: FfiConverterRustBuffer {
    typealias SwiftType = ErrorCompanion

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ErrorCompanion {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .Base58PrefixFormatNotSupported(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .Base58PrefixMismatch(
                message: FfiConverterString.read(from: &buf)
            )

        case 3: return try .BlockHashFormat(
                message: FfiConverterString.read(from: &buf)
            )

        case 4: return try .Client(
                message: FfiConverterString.read(from: &buf)
            )

        case 5: return try .DbInternal(
                message: FfiConverterString.read(from: &buf)
            )

        case 6: return try .DbTransaction(
                message: FfiConverterString.read(from: &buf)
            )

        case 7: return try .DecimalsFormatNotSupported(
                message: FfiConverterString.read(from: &buf)
            )

        case 8: return try .DecodeDbAddress(
                message: FfiConverterString.read(from: &buf)
            )

        case 9: return try .DecodeDbKey(
                message: FfiConverterString.read(from: &buf)
            )

        case 10: return try .DecodeDbMetadataSpecs(
                message: FfiConverterString.read(from: &buf)
            )

        case 11: return try .GenesisHashFormat(
                message: FfiConverterString.read(from: &buf)
            )

        case 12: return try .GenesisHashLength(
                message: FfiConverterString.read(from: &buf)
            )

        case 13: return try .InterfaceKey(
                message: FfiConverterString.read(from: &buf)
            )

        case 14: return try .LoadSpecsMetadata(
                message: FfiConverterString.read(from: &buf)
            )

        case 15: return try .LostAddress(
                message: FfiConverterString.read(from: &buf)
            )

        case 16: return try .LtError(
                message: FfiConverterString.read(from: &buf)
            )

        case 17: return try .MetaCut(
                message: FfiConverterString.read(from: &buf)
            )

        case 18: return try .MetadataFetchWithoutExistingEntry(
                message: FfiConverterString.read(from: &buf)
            )

        case 19: return try .MetadataFormat(
                message: FfiConverterString.read(from: &buf)
            )

        case 20: return try .MetadataNotDecodeable(
                message: FfiConverterString.read(from: &buf)
            )

        case 21: return try .MetadataVersion(
                message: FfiConverterString.read(from: &buf)
            )

        case 22: return try .NoBase58Prefix(
                message: FfiConverterString.read(from: &buf)
            )

        case 23: return try .NoDecimals(
                message: FfiConverterString.read(from: &buf)
            )

        case 24: return try .NoExistingEntryMetadataUpdate(
                message: FfiConverterString.read(from: &buf)
            )

        case 25: return try .NoMetadataV15(
                message: FfiConverterString.read(from: &buf)
            )

        case 26: return try .NoMetaPrefix(
                message: FfiConverterString.read(from: &buf)
            )

        case 27: return try .NotHex(
                message: FfiConverterString.read(from: &buf)
            )

        case 28: return try .NotSent(
                message: FfiConverterString.read(from: &buf)
            )

        case 29: return try .NotSubstrate(
                message: FfiConverterString.read(from: &buf)
            )

        case 30: return try .NoUnit(
                message: FfiConverterString.read(from: &buf)
            )

        case 31: return try .OnlySr25519(
                message: FfiConverterString.read(from: &buf)
            )

        case 32: return try .PoisonedLockSelector(
                message: FfiConverterString.read(from: &buf)
            )

        case 33: return try .PropertiesFormat(
                message: FfiConverterString.read(from: &buf)
            )

        case 34: return try .RawMetadataNotDecodeable(
                message: FfiConverterString.read(from: &buf)
            )

        case 35: return try .ReceiverClosed(
                message: FfiConverterString.read(from: &buf)
            )

        case 36: return try .ReceiverGuardPoisoned(
                message: FfiConverterString.read(from: &buf)
            )

        case 37: return try .RequestSer(
                message: FfiConverterString.read(from: &buf)
            )

        case 38: return try .ResponseDe(
                message: FfiConverterString.read(from: &buf)
            )

        case 39: return try .TooShort(
                message: FfiConverterString.read(from: &buf)
            )

        case 40: return try .TransactionNotParsable(
                message: FfiConverterString.read(from: &buf)
            )

        case 41: return try .UnexpectedFetch(
                message: FfiConverterString.read(from: &buf)
            )

        case 42: return try .UnitFormatNotSupported(
                message: FfiConverterString.read(from: &buf)
            )

        case 43: return try .UnknownPayloadType(
                message: FfiConverterString.read(from: &buf)
            )

        case 44: return try .UpdateMetadata(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ErrorCompanion, into buf: inout [UInt8]) {
        switch value {
        case .Base58PrefixFormatNotSupported(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        case .Base58PrefixMismatch(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(2))
        case .BlockHashFormat(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(3))
        case .Client(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(4))
        case .DbInternal(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(5))
        case .DbTransaction(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(6))
        case .DecimalsFormatNotSupported(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(7))
        case .DecodeDbAddress(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(8))
        case .DecodeDbKey(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(9))
        case .DecodeDbMetadataSpecs(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(10))
        case .GenesisHashFormat(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(11))
        case .GenesisHashLength(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(12))
        case .InterfaceKey(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(13))
        case .LoadSpecsMetadata(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(14))
        case .LostAddress(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(15))
        case .LtError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(16))
        case .MetaCut(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(17))
        case .MetadataFetchWithoutExistingEntry(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(18))
        case .MetadataFormat(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(19))
        case .MetadataNotDecodeable(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(20))
        case .MetadataVersion(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(21))
        case .NoBase58Prefix(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(22))
        case .NoDecimals(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(23))
        case .NoExistingEntryMetadataUpdate(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(24))
        case .NoMetadataV15(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(25))
        case .NoMetaPrefix(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(26))
        case .NotHex(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(27))
        case .NotSent(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(28))
        case .NotSubstrate(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(29))
        case .NoUnit(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(30))
        case .OnlySr25519(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(31))
        case .PoisonedLockSelector(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(32))
        case .PropertiesFormat(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(33))
        case .RawMetadataNotDecodeable(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(34))
        case .ReceiverClosed(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(35))
        case .ReceiverGuardPoisoned(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(36))
        case .RequestSer(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(37))
        case .ResponseDe(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(38))
        case .TooShort(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(39))
        case .TransactionNotParsable(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(40))
        case .UnexpectedFetch(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(41))
        case .UnitFormatNotSupported(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(42))
        case .UnknownPayloadType(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(43))
        case .UpdateMetadata(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(44))
        }
    }
}

extension ErrorCompanion: Equatable, Hashable {}

extension ErrorCompanion: Error {}

/**
 * QR code reader errors.
 */
public enum ErrorQr {
    case EmptyFrame(message: String)

    case FountainDifferentLength(message: String)

    case FountainFrameTooShort(message: String)

    case FountainInterruptedByLegacy(message: String)

    case FountainInterruptedByStatic(message: String)

    case FountainPacketEmpty(message: String)

    case LegacyDifferentLength(message: String)

    case LegacyInterruptedByFountain(message: String)

    case LegacyInterruptedByStatic(message: String)

    case LegacySameOrderDifferentContent(message: String)

    case LegacyTooShortNumberOfFrames(message: String)

    case LegacyTooShortOrder(message: String)

    case LegacyOrderTooHigh(message: String)

    case LegacyZeroFrames(message: String)

    case PoisonedLock(message: String)
}

public struct FfiConverterTypeErrorQr: FfiConverterRustBuffer {
    typealias SwiftType = ErrorQr

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ErrorQr {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .EmptyFrame(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .FountainDifferentLength(
                message: FfiConverterString.read(from: &buf)
            )

        case 3: return try .FountainFrameTooShort(
                message: FfiConverterString.read(from: &buf)
            )

        case 4: return try .FountainInterruptedByLegacy(
                message: FfiConverterString.read(from: &buf)
            )

        case 5: return try .FountainInterruptedByStatic(
                message: FfiConverterString.read(from: &buf)
            )

        case 6: return try .FountainPacketEmpty(
                message: FfiConverterString.read(from: &buf)
            )

        case 7: return try .LegacyDifferentLength(
                message: FfiConverterString.read(from: &buf)
            )

        case 8: return try .LegacyInterruptedByFountain(
                message: FfiConverterString.read(from: &buf)
            )

        case 9: return try .LegacyInterruptedByStatic(
                message: FfiConverterString.read(from: &buf)
            )

        case 10: return try .LegacySameOrderDifferentContent(
                message: FfiConverterString.read(from: &buf)
            )

        case 11: return try .LegacyTooShortNumberOfFrames(
                message: FfiConverterString.read(from: &buf)
            )

        case 12: return try .LegacyTooShortOrder(
                message: FfiConverterString.read(from: &buf)
            )

        case 13: return try .LegacyOrderTooHigh(
                message: FfiConverterString.read(from: &buf)
            )

        case 14: return try .LegacyZeroFrames(
                message: FfiConverterString.read(from: &buf)
            )

        case 15: return try .PoisonedLock(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ErrorQr, into buf: inout [UInt8]) {
        switch value {
        case .EmptyFrame(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        case .FountainDifferentLength(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(2))
        case .FountainFrameTooShort(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(3))
        case .FountainInterruptedByLegacy(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(4))
        case .FountainInterruptedByStatic(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(5))
        case .FountainPacketEmpty(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(6))
        case .LegacyDifferentLength(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(7))
        case .LegacyInterruptedByFountain(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(8))
        case .LegacyInterruptedByStatic(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(9))
        case .LegacySameOrderDifferentContent(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(10))
        case .LegacyTooShortNumberOfFrames(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(11))
        case .LegacyTooShortOrder(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(12))
        case .LegacyOrderTooHigh(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(13))
        case .LegacyZeroFrames(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(14))
        case .PoisonedLock(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(15))
        }
    }
}

extension ErrorQr: Equatable, Hashable {}

extension ErrorQr: Error {}

private struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeFrames: FfiConverterRustBuffer {
    typealias SwiftType = Frames?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeFrames.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFrames.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceTypeChainKey: FfiConverterRustBuffer {
    typealias SwiftType = [ChainKey]

    public static func write(_ value: [ChainKey], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeChainKey.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ChainKey] {
        let len: Int32 = try readInt(&buf)
        var seq = [ChainKey]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeChainKey.read(from: &buf))
        }
        return seq
    }
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ChainKey = String
public struct FfiConverterTypeChainKey: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChainKey {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: ChainKey, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> ChainKey {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: ChainKey) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

public func FfiConverterTypeChainKey_lift(_ value: RustBuffer) throws -> ChainKey {
    return try FfiConverterTypeChainKey.lift(value)
}

public func FfiConverterTypeChainKey_lower(_ value: ChainKey) -> RustBuffer {
    return FfiConverterTypeChainKey.lower(value)
}

public func deleteByKey(chainKey: ChainKey, dbPath: String) throws { try rustCallWithError(FfiConverterTypeErrorCompanion.lift) {
    uniffi_siltti_fn_func_delete_by_key(
        FfiConverterTypeChainKey.lower(chainKey),
        FfiConverterString.lower(dbPath), $0
    )
}
}

public func getAllKeys(dbPath: String) throws -> [ChainKey] {
    return try FfiConverterSequenceTypeChainKey.lift(rustCallWithError(FfiConverterTypeErrorCompanion.lift) {
        uniffi_siltti_fn_func_get_all_keys(
            FfiConverterString.lower(dbPath), $0
        )
    })
}

public func isUpdated(dbPath: String) throws -> Bool {
    return try FfiConverterBool.lift(rustCallWithError(FfiConverterTypeErrorCompanion.lift) {
        uniffi_siltti_fn_func_is_updated(
            FfiConverterString.lower(dbPath), $0
        )
    })
}

public func requestDefaults() { try! rustCall {
    uniffi_siltti_fn_func_request_defaults($0
    )
}
}

public func requestFullFetch(address: String) { try! rustCall {
    uniffi_siltti_fn_func_request_full_fetch(
        FfiConverterString.lower(address), $0
    )
}
}

public func requestUpdateByKey(chainKey: ChainKey, dbPath: String) throws { try rustCallWithError(FfiConverterTypeErrorCompanion.lift) {
    uniffi_siltti_fn_func_request_update_by_key(
        FfiConverterTypeChainKey.lower(chainKey),
        FfiConverterString.lower(dbPath), $0
    )
}
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_siltti_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_siltti_checksum_func_delete_by_key() != 37526 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_func_get_all_keys() != 29700 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_func_is_updated() != 43069 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_func_request_defaults() != 36183 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_func_request_full_fetch() != 16424 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_func_request_update_by_key() != 20258 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_method_action_is_transmit() != 50718 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_method_action_make_packet() != 31040 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_method_collection_clean() != 32745 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_method_collection_frames() != 48111 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_method_collection_process_frame() != 62882 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_method_signbycompanion_make_signature() != 63067 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_method_signbycompanion_export_public_key() != 37200 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_method_signaturemaker_signed_data() != 51062 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_constructor_action_new_derivation() != 62603 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_constructor_action_new_kampela_stop() != 10404 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_constructor_action_new_payload() != 52663 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_constructor_collection_new() != 34380 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_siltti_checksum_constructor_signaturemaker_new() != 41855 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitSignByCompanion()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
